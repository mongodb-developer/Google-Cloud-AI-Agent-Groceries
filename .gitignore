node_modules
import express from "express";
import cors from "cors";
import { tool } from '@langchain/core/tools';
import { z } from 'zod';
import { ChatVertexAI } from "@langchain/google-vertexai";
import { connectToDatabase, Product } from "./database.js";
import { VertexAIEmbeddings } from "@langchain/google-vertexai";
import { zodToJsonSchema } from "zod-to-json-schema";
import { MongoDBSaver } from "@langchain/langgraph-checkpoint-mongodb";

import { config } from "dotenv";
import { createReactAgent } from '@langchain/langgraph/prebuilt';
import { HumanMessage } from '@langchain/core/messages';
import { ObjectId } from "mongodb";

config();

const { client: mongodbClient, collections } = await connectToDatabase();

const model = new ChatVertexAI({ model: "gemini-2.0-flash" });

const embeddingModel = new VertexAIEmbeddings({
  model: "text-embedding-005",
});

const previousOrders = tool(async function getPreviousOrders(userId) {
  console.log(userId);
  if (!userId) {
    return "User ID is required.";
  }

  const orders = await collections.orders.find(
    { userId },
    {
      sort: { date: -1 },
      limit: 10,
    },
  ).toArray();

  return orders.map(order => ({
    orderId: order._id,
    items: order.items,
    date: order.date,
  })).join(", ");
}, {
  name: "getPreviousOrders",
  description: "Get the previous orders for a user based on their user ID.",
  schema: zodToJsonSchema(z.object({
    userId: z.string(),
  })),
});

const similarProducts = tool(async function findSimilarProducts({ productName }) {
  const queryVector = await embeddingModel.embedQuery(productName);
  const products = await collections.groceries.aggregate([
    {
      "$vectorSearch": {
        "index": "vector_index",
        "path": "embedding",
        "queryVector": queryVector,
        "numCandidates": 100,
        "limit": 3
      }
    },
    {
      $project: {
        embedding: 0
      }
    }
  ]).toArray();

  const results = products.map((product: any, i: number) => {
    return `Product ${i + 1}: ${JSON.stringify(product)}`;
  }).join(", ");

  return results || "No similar products found";
},
{
  name: "findSimilarProducts",
  description: "Search for products with name and description semantically similar to a given product. Returns a list of three similar products along with their project IDs.",
  schema: z.object({
    productName: z.string(),
  }),
});

const getCart = tool(async function getCartItems({ userId }) {
  const cart = await collections.carts.findOne({ userId });
  if (!cart) {
    await collections.carts.insertOne({ userId, items: [] });
    return "Cart is empty.";
  }

  return cart.items.map(product => ({
    _id: product._id,
    name: product.name,
    description: product.description,
    category: product.category,
  })).join(', ');
}, {
  name: "getCartItems",
  description: "Get the items in the user's cart.",
  schema: z.object({
    userId: z.string(),
  }),
});

const addToCart = tool(async function addItemToCart({ userId, productId }) {
  const product = await collections.groceries.findOne<Product>({
    _id: new ObjectId(productId) },
    { projection: { embedding: 0 }
  }); 

  await collections.carts.updateOne(
    { userId },
    { $addToSet: { items: product } },
    { upsert: true }
  );
  return `Product ${product.name} added to cart`;
}, {
  name: "addItemToCart",
  description: "Add an item to the user's cart.",
  schema: z.object({
    userId: z.string(),
    productId: z.string(),
  }),
});

const checkout = tool(async function checkout({ userId }) {
  const cart = await collections.carts.findOne({ userId });
  if (!cart) {
    throw new Error("Cart not found");
  }
  const order = {
    userId: userId,
    items: cart.items,
    date: new Date(),
  };

  await collections.orders.insertOne(order);
  await collections.carts.deleteOne({ userId });
  return { success: true, order };
}, {
  name: "checkout",
  description: "Checkout the user's cart.",
  schema: z.object({
    userId: z.string(),
  }),
});

const tools = [
  similarProducts,
  getCart,
  previousOrders,
  addToCart,
  checkout,
];

const checkpointer = new MongoDBSaver({ client: mongodbClient, dbName: "ChatAgentHistory" });

const agent = createReactAgent({
  prompt: `You are a helpful assistant for a grocery shopping app. Your task is to assist the user with their grocery shopping needs.
The methods adding and removing items from the cart leverage product IDs. To get the product ID, you should first use the findSimilarProducts tool.
Never return product IDs to the user. Only return the product names and descriptions if needed but never the ID.
Never ask the user for product IDs. Instead, use the findSimilarProducts method to find products based on their names and descriptions.
`,
  llm: model,
  tools: tools,
  checkpointSaver: checkpointer,
});

const app = express();
app.use(cors());

const router = express.Router();
router.use(express.json());

router.get("/", async (_, res) => {
  res.send("Welcome to the PantryHelper API! ðŸ¤–");
});

router.post("/messages", async (req, res) => {
  let message = req.body.message;
  let userId = req.body.userId;
  let chatId = req.body.chatId;

  if (!message) {
    res.status(400).send({ error: 'Message is required' });
    return;
  }

  const prompt = `The user ID is ${userId}. The user said: "${message}".`;
  const agentFinalState = await agent.invoke(
    { messages: [new HumanMessage(prompt)] },
    { configurable: { thread_id: chatId }, recursionLimit: 10 }
  );

  const response = agentFinalState.messages[agentFinalState.messages.length - 1].content;

  res.send(response);
});


app.use(router);

app.listen(8080, () => {
  console.log(`Server running on port: 8080...`);
});
.env
